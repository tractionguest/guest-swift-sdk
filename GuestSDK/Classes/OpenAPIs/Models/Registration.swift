//
// Registration.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** The data of a Registration */
public struct Registration: Codable, Hashable {

    /** Registration unique identifier */
    public var id: String
    public var visitor: Visitor?
    public var invite: Invite?
    /** URL of the uploaded photo */
    public var photoUrl: String?
    /** Company&#39;s name */
    public var company: String?
    /** E-mail */
    public var email: String?
    /** Guest&#39;s name */
    public var name: String?
    /** Datetime when registration was created */
    public var createdAt: Date
    public var signin: Signin?

    public init(id: String, visitor: Visitor? = nil, invite: Invite? = nil, photoUrl: String? = nil, company: String? = nil, email: String? = nil, name: String? = nil, createdAt: Date, signin: Signin? = nil) {
        self.id = id
        self.visitor = visitor
        self.invite = invite
        self.photoUrl = photoUrl
        self.company = company
        self.email = email
        self.name = name
        self.createdAt = createdAt
        self.signin = signin
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case visitor
        case invite
        case photoUrl = "photo_url"
        case company
        case email
        case name
        case createdAt = "created_at"
        case signin
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(visitor, forKey: .visitor)
        try container.encodeIfPresent(invite, forKey: .invite)
        try container.encodeIfPresent(photoUrl, forKey: .photoUrl)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(signin, forKey: .signin)
    }



}
