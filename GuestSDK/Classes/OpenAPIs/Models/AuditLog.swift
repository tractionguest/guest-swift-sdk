//
// AuditLog.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** The root of the AuditLog type&#39;s schema. */
public struct AuditLog: Codable, Hashable {

    /**  */
    public var id: Int
    /**  */
    public var createdAt: String?
    /**  */
    public var requestUuid: String?
    /**  */
    public var remoteAddress: String?
    /**  */
    public var comment: String?
    /**  */
    public var version: Int?
    public var auditedChanges: [AuditLogChange]?
    /**  */
    public var action: String?
    /**  */
    public var username: String?
    /**  */
    public var userId: Int?
    /**  */
    public var auditableType: String?
    /**  */
    public var auditableId: Int?

    public init(id: Int, createdAt: String? = nil, requestUuid: String? = nil, remoteAddress: String? = nil, comment: String? = nil, version: Int? = nil, auditedChanges: [AuditLogChange]? = nil, action: String? = nil, username: String? = nil, userId: Int? = nil, auditableType: String? = nil, auditableId: Int? = nil) {
        self.id = id
        self.createdAt = createdAt
        self.requestUuid = requestUuid
        self.remoteAddress = remoteAddress
        self.comment = comment
        self.version = version
        self.auditedChanges = auditedChanges
        self.action = action
        self.username = username
        self.userId = userId
        self.auditableType = auditableType
        self.auditableId = auditableId
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdAt = "created_at"
        case requestUuid = "request_uuid"
        case remoteAddress = "remote_address"
        case comment
        case version
        case auditedChanges = "audited_changes"
        case action
        case username
        case userId = "user_id"
        case auditableType = "auditable_type"
        case auditableId = "auditable_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(requestUuid, forKey: .requestUuid)
        try container.encodeIfPresent(remoteAddress, forKey: .remoteAddress)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(auditedChanges, forKey: .auditedChanges)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(username, forKey: .username)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(auditableType, forKey: .auditableType)
        try container.encodeIfPresent(auditableId, forKey: .auditableId)
    }



}
