//
// SigninCreateParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/**  */
public struct SigninCreateParams: Codable, Hashable {

    /** UUID of a Registration */
    public var registrationId: String?
    /** E-mail, ignored if &#x60;registration_id&#x60; is included */
    public var email: String?
    /** Company name, ignored if &#x60;registration_id&#x60; is included */
    public var company: String?
    /** Last name, ignored if &#x60;registration_id&#x60; is included */
    public var lastName: String?
    /** First name, ignored if &#x60;registration_id&#x60; is included */
    public var firstName: String?
    public var smsMessage: String?
    public var sendNotifications: Bool?
    /** ID of the Location where the Signin happened, ignored if &#x60;registration_id&#x60; is included */
    public var locationId: Int?
    /** Array of Host ids, ignored if &#x60;registration_id&#x60; is included */
    public var hostIds: [Int]?
    public var hostEmailTemplateId: Int?
    public var guestEmailTemplateId: Int?

    public init(registrationId: String? = nil, email: String? = nil, company: String? = nil, lastName: String? = nil, firstName: String? = nil, smsMessage: String? = nil, sendNotifications: Bool? = nil, locationId: Int? = nil, hostIds: [Int]? = nil, hostEmailTemplateId: Int? = nil, guestEmailTemplateId: Int? = nil) {
        self.registrationId = registrationId
        self.email = email
        self.company = company
        self.lastName = lastName
        self.firstName = firstName
        self.smsMessage = smsMessage
        self.sendNotifications = sendNotifications
        self.locationId = locationId
        self.hostIds = hostIds
        self.hostEmailTemplateId = hostEmailTemplateId
        self.guestEmailTemplateId = guestEmailTemplateId
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case registrationId = "registration_id"
        case email
        case company
        case lastName = "last_name"
        case firstName = "first_name"
        case smsMessage = "sms_message"
        case sendNotifications = "send_notifications"
        case locationId = "location_id"
        case hostIds = "host_ids"
        case hostEmailTemplateId = "host_email_template_id"
        case guestEmailTemplateId = "guest_email_template_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(registrationId, forKey: .registrationId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(smsMessage, forKey: .smsMessage)
        try container.encodeIfPresent(sendNotifications, forKey: .sendNotifications)
        try container.encodeIfPresent(locationId, forKey: .locationId)
        try container.encodeIfPresent(hostIds, forKey: .hostIds)
        try container.encodeIfPresent(hostEmailTemplateId, forKey: .hostEmailTemplateId)
        try container.encodeIfPresent(guestEmailTemplateId, forKey: .guestEmailTemplateId)
    }



}
