//
// BatchJob.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** The root of the BatchJob&#39;s schema. */
public struct BatchJob: Codable, Hashable {

    public var bid: String?
    public var createdAt: String?
    public var status: String?
    public var totalRecords: Int?
    public var workerName: String?
    public var user: User?
    public var pending: Int?
    public var completed: Int?
    public var failed: Int?

    public init(bid: String? = nil, createdAt: String? = nil, status: String? = nil, totalRecords: Int? = nil, workerName: String? = nil, user: User? = nil, pending: Int? = nil, completed: Int? = nil, failed: Int? = nil) {
        self.bid = bid
        self.createdAt = createdAt
        self.status = status
        self.totalRecords = totalRecords
        self.workerName = workerName
        self.user = user
        self.pending = pending
        self.completed = completed
        self.failed = failed
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bid
        case createdAt = "created_at"
        case status
        case totalRecords = "total_records"
        case workerName = "worker_name"
        case user
        case pending
        case completed
        case failed
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bid, forKey: .bid)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(totalRecords, forKey: .totalRecords)
        try container.encodeIfPresent(workerName, forKey: .workerName)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(pending, forKey: .pending)
        try container.encodeIfPresent(completed, forKey: .completed)
        try container.encodeIfPresent(failed, forKey: .failed)
    }



}
