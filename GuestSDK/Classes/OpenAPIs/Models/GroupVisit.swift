//
// GroupVisit.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** The data structure for a Group Visit object. Also called an Appointment. */
public struct GroupVisit: Codable, Hashable {

    public var id: Int?
    public var location: Location?
    public var hosts: [Host]?
    public var name: String?
    public var startTime: String?
    public var endTime: String?
    public var createdAt: String?
    public var updatedAt: String?
    public var registrationLimit: Int?
    public var registrationUrl: String?
    public var invitesCount: Int?
    public var unconfirmedRegistrationsCount: Int?
    public var manualRegistrationApproval: Bool?
    public var publicRegistrationEnabled: Bool?

    public init(id: Int? = nil, location: Location? = nil, hosts: [Host]? = nil, name: String? = nil, startTime: String? = nil, endTime: String? = nil, createdAt: String? = nil, updatedAt: String? = nil, registrationLimit: Int? = nil, registrationUrl: String? = nil, invitesCount: Int? = nil, unconfirmedRegistrationsCount: Int? = nil, manualRegistrationApproval: Bool? = nil, publicRegistrationEnabled: Bool? = nil) {
        self.id = id
        self.location = location
        self.hosts = hosts
        self.name = name
        self.startTime = startTime
        self.endTime = endTime
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.registrationLimit = registrationLimit
        self.registrationUrl = registrationUrl
        self.invitesCount = invitesCount
        self.unconfirmedRegistrationsCount = unconfirmedRegistrationsCount
        self.manualRegistrationApproval = manualRegistrationApproval
        self.publicRegistrationEnabled = publicRegistrationEnabled
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case location
        case hosts
        case name
        case startTime = "start_time"
        case endTime = "end_time"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case registrationLimit = "registration_limit"
        case registrationUrl = "registration_url"
        case invitesCount = "invites_count"
        case unconfirmedRegistrationsCount = "unconfirmed_registrations_count"
        case manualRegistrationApproval = "manual_registration_approval"
        case publicRegistrationEnabled = "public_registration_enabled"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(hosts, forKey: .hosts)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(endTime, forKey: .endTime)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(registrationLimit, forKey: .registrationLimit)
        try container.encodeIfPresent(registrationUrl, forKey: .registrationUrl)
        try container.encodeIfPresent(invitesCount, forKey: .invitesCount)
        try container.encodeIfPresent(unconfirmedRegistrationsCount, forKey: .unconfirmedRegistrationsCount)
        try container.encodeIfPresent(manualRegistrationApproval, forKey: .manualRegistrationApproval)
        try container.encodeIfPresent(publicRegistrationEnabled, forKey: .publicRegistrationEnabled)
    }



}
