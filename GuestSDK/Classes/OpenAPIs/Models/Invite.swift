//
// Invite.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** The root of the Invite type&#39;s schema. */
public struct Invite: Codable, Hashable {

    public enum WatchlistColour: String, Codable, CaseIterable {
        case red = "RED"
        case green = "GREEN"
        case yellow = "YELLOW"
        case orange = "ORANGE"
    }
    public var id: Int
    public var registration: Registration?
    /**  */
    public var mobileNumber: String?
    /**  */
    public var email: String?
    /**  */
    public var endDate: Date?
    public var inviteWatchlist: InviteWatchlist?
    public var hosts: [Host]?
    public var watchlistColour: WatchlistColour?
    public var location: Location?
    public var startDate: Date?
    public var lastName: String?
    public var firstName: String?
    public var groupVisit: GroupVisit?

    public init(id: Int, registration: Registration? = nil, mobileNumber: String? = nil, email: String?, endDate: Date? = nil, inviteWatchlist: InviteWatchlist? = nil, hosts: [Host]? = nil, watchlistColour: WatchlistColour? = nil, location: Location? = nil, startDate: Date? = nil, lastName: String?, firstName: String?, groupVisit: GroupVisit? = nil) {
        self.id = id
        self.registration = registration
        self.mobileNumber = mobileNumber
        self.email = email
        self.endDate = endDate
        self.inviteWatchlist = inviteWatchlist
        self.hosts = hosts
        self.watchlistColour = watchlistColour
        self.location = location
        self.startDate = startDate
        self.lastName = lastName
        self.firstName = firstName
        self.groupVisit = groupVisit
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case registration
        case mobileNumber = "mobile_number"
        case email
        case endDate = "end_date"
        case inviteWatchlist = "invite_watchlist"
        case hosts
        case watchlistColour = "watchlist_colour"
        case location
        case startDate = "start_date"
        case lastName = "last_name"
        case firstName = "first_name"
        case groupVisit = "group_visit"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(registration, forKey: .registration)
        try container.encodeIfPresent(mobileNumber, forKey: .mobileNumber)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(inviteWatchlist, forKey: .inviteWatchlist)
        try container.encodeIfPresent(hosts, forKey: .hosts)
        try container.encodeIfPresent(watchlistColour, forKey: .watchlistColour)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encode(lastName, forKey: .lastName)
        try container.encode(firstName, forKey: .firstName)
        try container.encodeIfPresent(groupVisit, forKey: .groupVisit)
    }



}
