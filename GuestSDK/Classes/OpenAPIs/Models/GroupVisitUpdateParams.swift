//
// GroupVisitUpdateParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** The allowable changes when updating a Group Visit (Appointment). */
public struct GroupVisitUpdateParams: Codable, Hashable {

    public var name: String?
    public var startTime: String?
    public var endTime: String?
    public var locationId: Int?
    public var registrationLimit: Int?
    public var manualRegistrationApproval: Bool?
    public var publicRegistrationEnabled: Bool?
    public var hostIds: [Int]?
    public var inviteIds: [Int]?
    public var refreshRegistrationUrl: Bool?

    public init(name: String? = nil, startTime: String? = nil, endTime: String? = nil, locationId: Int? = nil, registrationLimit: Int? = nil, manualRegistrationApproval: Bool? = nil, publicRegistrationEnabled: Bool? = nil, hostIds: [Int]? = nil, inviteIds: [Int]? = nil, refreshRegistrationUrl: Bool? = nil) {
        self.name = name
        self.startTime = startTime
        self.endTime = endTime
        self.locationId = locationId
        self.registrationLimit = registrationLimit
        self.manualRegistrationApproval = manualRegistrationApproval
        self.publicRegistrationEnabled = publicRegistrationEnabled
        self.hostIds = hostIds
        self.inviteIds = inviteIds
        self.refreshRegistrationUrl = refreshRegistrationUrl
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case startTime = "start_time"
        case endTime = "end_time"
        case locationId = "location_id"
        case registrationLimit = "registration_limit"
        case manualRegistrationApproval = "manual_registration_approval"
        case publicRegistrationEnabled = "public_registration_enabled"
        case hostIds = "host_ids"
        case inviteIds = "invite_ids"
        case refreshRegistrationUrl = "refresh_registration_url"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(endTime, forKey: .endTime)
        try container.encodeIfPresent(locationId, forKey: .locationId)
        try container.encodeIfPresent(registrationLimit, forKey: .registrationLimit)
        try container.encodeIfPresent(manualRegistrationApproval, forKey: .manualRegistrationApproval)
        try container.encodeIfPresent(publicRegistrationEnabled, forKey: .publicRegistrationEnabled)
        try container.encodeIfPresent(hostIds, forKey: .hostIds)
        try container.encodeIfPresent(inviteIds, forKey: .inviteIds)
        try container.encodeIfPresent(refreshRegistrationUrl, forKey: .refreshRegistrationUrl)
    }



}
