//
// Signin.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct Signin: Codable, Hashable {

    public var id: Int
    public var mobileNumber: String?
    public var signinWatchlist: SigninWatchlist?
    public var hosts: [Host]
    public var signinTimestamp: Date?
    public var signinPhotoUrl: String?
    public var signedOutTimestamp: Date?
    public var locationName: String?
    public var lastName: String?
    public var isAcknowledged: Bool?
    public var isAccountedFor: Bool?
    public var firstName: String?
    public var email: String?
    public var company: String?
    public var registration: Registration?

    public init(id: Int, mobileNumber: String? = nil, signinWatchlist: SigninWatchlist? = nil, hosts: [Host], signinTimestamp: Date? = nil, signinPhotoUrl: String? = nil, signedOutTimestamp: Date? = nil, locationName: String? = nil, lastName: String? = nil, isAcknowledged: Bool? = nil, isAccountedFor: Bool? = nil, firstName: String? = nil, email: String? = nil, company: String? = nil, registration: Registration? = nil) {
        self.id = id
        self.mobileNumber = mobileNumber
        self.signinWatchlist = signinWatchlist
        self.hosts = hosts
        self.signinTimestamp = signinTimestamp
        self.signinPhotoUrl = signinPhotoUrl
        self.signedOutTimestamp = signedOutTimestamp
        self.locationName = locationName
        self.lastName = lastName
        self.isAcknowledged = isAcknowledged
        self.isAccountedFor = isAccountedFor
        self.firstName = firstName
        self.email = email
        self.company = company
        self.registration = registration
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case mobileNumber = "mobile_number"
        case signinWatchlist = "signin_watchlist"
        case hosts
        case signinTimestamp = "signin_timestamp"
        case signinPhotoUrl = "signin_photo_url"
        case signedOutTimestamp = "signed_out_timestamp"
        case locationName = "location_name"
        case lastName = "last_name"
        case isAcknowledged = "is_acknowledged"
        case isAccountedFor = "is_accounted_for"
        case firstName = "first_name"
        case email
        case company
        case registration
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(mobileNumber, forKey: .mobileNumber)
        try container.encodeIfPresent(signinWatchlist, forKey: .signinWatchlist)
        try container.encode(hosts, forKey: .hosts)
        try container.encodeIfPresent(signinTimestamp, forKey: .signinTimestamp)
        try container.encodeIfPresent(signinPhotoUrl, forKey: .signinPhotoUrl)
        try container.encodeIfPresent(signedOutTimestamp, forKey: .signedOutTimestamp)
        try container.encodeIfPresent(locationName, forKey: .locationName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(isAcknowledged, forKey: .isAcknowledged)
        try container.encodeIfPresent(isAccountedFor, forKey: .isAccountedFor)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(registration, forKey: .registration)
    }



}
