//
// WatchlistMatch.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/**  */
public struct WatchlistMatch: Codable, Hashable {

    public var id: String?
    public var altNames: [String]?
    public var federalRegisterNotice: String?
    public var name: String
    public var sourceInformationUrl: String?
    public var sourceListUrl: String?
    public var list: String
    /**  */
    public var type: String?
    /**  */
    public var category: String?
    /**  */
    public var street1: String?
    /**  */
    public var street2: String?
    /**  */
    public var city: String?
    /**  */
    public var state: String?
    /**  */
    public var country: String?
    /**  */
    public var notes: String?
    /**  */
    public var frc: String?
    /**  */
    public var start: String?
    /**  */
    public var end: String?
    /**  */
    public var frserve: String?
    /**  */
    public var optionalID: String?
    /**  */
    public var alertType: String?
    /**  */
    public var pairStatus: String?
    /**  */
    public var pairReason: String?
    /**  */
    public var pairComments: String?
    /**  */
    public var applicationDisplayName: String?
    /**  */
    public var applicationId: String?
    /**  */
    public var clientId: String?
    /**  */
    public var clientKey: String?
    /**  */
    public var clientFullName: String?
    /**  */
    public var listKey: String?
    /**  */
    public var listName: String?
    /**  */
    public var listId: String?
    /**  */
    public var listVersion: String?
    /**  */
    public var listModifyDate: String?
    /**  */
    public var listProfileId: String?
    /**  */
    public var listProfileKey: String?
    /**  */
    public var linkSingleStringName: String?
    /**  */
    public var listParentSingleStringName: String?
    /**  */
    public var listCategory: String?
    /**  */
    public var listPepCategory: String?
    /**  */
    public var listDoBs: String?
    /**  */
    public var listCountries: String?
    /**  */
    public var rankString: String?
    /**  */
    public var ranktype: String?
    /**  */
    public var rankweight: String?
    /**  */
    public var pairLoadDate: String?
    /**  */
    public var eAddressTo: String?
    /**  */
    public var eAddressCc: String?
    /**  */
    public var origin: String?
    /**  */
    public var secondsviewed: String?
    /**  */
    public var initialUser: String?
    /**  */
    public var isPairParentFlag: String?
    /**  */
    public var pairMetSearchCriteriaFlag: String?
    /**  */
    public var editableDueToAssignmentFlag: String?
    /**  */
    public var modifyDate: String?
    /**  */
    public var modifiedByUser: String?
    /**  */
    public var pairReportType: String?
    /**  */
    public var finscanCategory: String?
    /**  */
    public var wrapperStatus: String?
    /**  */
    public var sourceLists: String?

    public init(id: String? = nil, altNames: [String]? = nil, federalRegisterNotice: String? = nil, name: String, sourceInformationUrl: String? = nil, sourceListUrl: String? = nil, list: String, type: String? = nil, category: String? = nil, street1: String? = nil, street2: String? = nil, city: String? = nil, state: String? = nil, country: String? = nil, notes: String? = nil, frc: String? = nil, start: String? = nil, end: String? = nil, frserve: String? = nil, optionalID: String? = nil, alertType: String? = nil, pairStatus: String? = nil, pairReason: String? = nil, pairComments: String? = nil, applicationDisplayName: String? = nil, applicationId: String? = nil, clientId: String? = nil, clientKey: String? = nil, clientFullName: String? = nil, listKey: String? = nil, listName: String? = nil, listId: String? = nil, listVersion: String? = nil, listModifyDate: String? = nil, listProfileId: String? = nil, listProfileKey: String? = nil, linkSingleStringName: String? = nil, listParentSingleStringName: String? = nil, listCategory: String? = nil, listPepCategory: String? = nil, listDoBs: String? = nil, listCountries: String? = nil, rankString: String? = nil, ranktype: String? = nil, rankweight: String? = nil, pairLoadDate: String? = nil, eAddressTo: String? = nil, eAddressCc: String? = nil, origin: String? = nil, secondsviewed: String? = nil, initialUser: String? = nil, isPairParentFlag: String? = nil, pairMetSearchCriteriaFlag: String? = nil, editableDueToAssignmentFlag: String? = nil, modifyDate: String? = nil, modifiedByUser: String? = nil, pairReportType: String? = nil, finscanCategory: String? = nil, wrapperStatus: String? = nil, sourceLists: String? = nil) {
        self.id = id
        self.altNames = altNames
        self.federalRegisterNotice = federalRegisterNotice
        self.name = name
        self.sourceInformationUrl = sourceInformationUrl
        self.sourceListUrl = sourceListUrl
        self.list = list
        self.type = type
        self.category = category
        self.street1 = street1
        self.street2 = street2
        self.city = city
        self.state = state
        self.country = country
        self.notes = notes
        self.frc = frc
        self.start = start
        self.end = end
        self.frserve = frserve
        self.optionalID = optionalID
        self.alertType = alertType
        self.pairStatus = pairStatus
        self.pairReason = pairReason
        self.pairComments = pairComments
        self.applicationDisplayName = applicationDisplayName
        self.applicationId = applicationId
        self.clientId = clientId
        self.clientKey = clientKey
        self.clientFullName = clientFullName
        self.listKey = listKey
        self.listName = listName
        self.listId = listId
        self.listVersion = listVersion
        self.listModifyDate = listModifyDate
        self.listProfileId = listProfileId
        self.listProfileKey = listProfileKey
        self.linkSingleStringName = linkSingleStringName
        self.listParentSingleStringName = listParentSingleStringName
        self.listCategory = listCategory
        self.listPepCategory = listPepCategory
        self.listDoBs = listDoBs
        self.listCountries = listCountries
        self.rankString = rankString
        self.ranktype = ranktype
        self.rankweight = rankweight
        self.pairLoadDate = pairLoadDate
        self.eAddressTo = eAddressTo
        self.eAddressCc = eAddressCc
        self.origin = origin
        self.secondsviewed = secondsviewed
        self.initialUser = initialUser
        self.isPairParentFlag = isPairParentFlag
        self.pairMetSearchCriteriaFlag = pairMetSearchCriteriaFlag
        self.editableDueToAssignmentFlag = editableDueToAssignmentFlag
        self.modifyDate = modifyDate
        self.modifiedByUser = modifiedByUser
        self.pairReportType = pairReportType
        self.finscanCategory = finscanCategory
        self.wrapperStatus = wrapperStatus
        self.sourceLists = sourceLists
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case altNames = "alt_names"
        case federalRegisterNotice = "federal_register_notice"
        case name
        case sourceInformationUrl = "source_information_url"
        case sourceListUrl = "source_list_url"
        case list
        case type
        case category
        case street1
        case street2
        case city
        case state
        case country
        case notes
        case frc
        case start
        case end
        case frserve
        case optionalID = "optional_ID"
        case alertType = "alert_type"
        case pairStatus = "pair_status"
        case pairReason = "pair_reason"
        case pairComments = "pair_comments"
        case applicationDisplayName = "application_display_name"
        case applicationId = "application_id"
        case clientId = "client_id"
        case clientKey = "client_key"
        case clientFullName = "client_full_name"
        case listKey = "list_key"
        case listName = "list_name"
        case listId = "list_id"
        case listVersion = "list_version"
        case listModifyDate = "list_modify_date"
        case listProfileId = "list_profile_id"
        case listProfileKey = "list_profile_key"
        case linkSingleStringName = "link_single_string_name"
        case listParentSingleStringName = "list_parent_single_string_name"
        case listCategory = "list_category"
        case listPepCategory = "list_pep_category"
        case listDoBs = "list_do_bs"
        case listCountries = "list_countries"
        case rankString = "rank_string"
        case ranktype
        case rankweight
        case pairLoadDate = "pair_load_date"
        case eAddressTo = "e_address_to"
        case eAddressCc = "e_address_cc"
        case origin
        case secondsviewed
        case initialUser = "initial_user"
        case isPairParentFlag = "is_pair_parent_flag"
        case pairMetSearchCriteriaFlag = "pair_met_search_criteria_flag"
        case editableDueToAssignmentFlag = "editable_due_to_assignment_flag"
        case modifyDate = "modify_date"
        case modifiedByUser = "modified_by_user"
        case pairReportType = "pair_report_type"
        case finscanCategory = "finscan_category"
        case wrapperStatus = "wrapper_status"
        case sourceLists = "source_lists"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(altNames, forKey: .altNames)
        try container.encodeIfPresent(federalRegisterNotice, forKey: .federalRegisterNotice)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(sourceInformationUrl, forKey: .sourceInformationUrl)
        try container.encodeIfPresent(sourceListUrl, forKey: .sourceListUrl)
        try container.encode(list, forKey: .list)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(category, forKey: .category)
        try container.encodeIfPresent(street1, forKey: .street1)
        try container.encodeIfPresent(street2, forKey: .street2)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(notes, forKey: .notes)
        try container.encodeIfPresent(frc, forKey: .frc)
        try container.encodeIfPresent(start, forKey: .start)
        try container.encodeIfPresent(end, forKey: .end)
        try container.encodeIfPresent(frserve, forKey: .frserve)
        try container.encodeIfPresent(optionalID, forKey: .optionalID)
        try container.encodeIfPresent(alertType, forKey: .alertType)
        try container.encodeIfPresent(pairStatus, forKey: .pairStatus)
        try container.encodeIfPresent(pairReason, forKey: .pairReason)
        try container.encodeIfPresent(pairComments, forKey: .pairComments)
        try container.encodeIfPresent(applicationDisplayName, forKey: .applicationDisplayName)
        try container.encodeIfPresent(applicationId, forKey: .applicationId)
        try container.encodeIfPresent(clientId, forKey: .clientId)
        try container.encodeIfPresent(clientKey, forKey: .clientKey)
        try container.encodeIfPresent(clientFullName, forKey: .clientFullName)
        try container.encodeIfPresent(listKey, forKey: .listKey)
        try container.encodeIfPresent(listName, forKey: .listName)
        try container.encodeIfPresent(listId, forKey: .listId)
        try container.encodeIfPresent(listVersion, forKey: .listVersion)
        try container.encodeIfPresent(listModifyDate, forKey: .listModifyDate)
        try container.encodeIfPresent(listProfileId, forKey: .listProfileId)
        try container.encodeIfPresent(listProfileKey, forKey: .listProfileKey)
        try container.encodeIfPresent(linkSingleStringName, forKey: .linkSingleStringName)
        try container.encodeIfPresent(listParentSingleStringName, forKey: .listParentSingleStringName)
        try container.encodeIfPresent(listCategory, forKey: .listCategory)
        try container.encodeIfPresent(listPepCategory, forKey: .listPepCategory)
        try container.encodeIfPresent(listDoBs, forKey: .listDoBs)
        try container.encodeIfPresent(listCountries, forKey: .listCountries)
        try container.encodeIfPresent(rankString, forKey: .rankString)
        try container.encodeIfPresent(ranktype, forKey: .ranktype)
        try container.encodeIfPresent(rankweight, forKey: .rankweight)
        try container.encodeIfPresent(pairLoadDate, forKey: .pairLoadDate)
        try container.encodeIfPresent(eAddressTo, forKey: .eAddressTo)
        try container.encodeIfPresent(eAddressCc, forKey: .eAddressCc)
        try container.encodeIfPresent(origin, forKey: .origin)
        try container.encodeIfPresent(secondsviewed, forKey: .secondsviewed)
        try container.encodeIfPresent(initialUser, forKey: .initialUser)
        try container.encodeIfPresent(isPairParentFlag, forKey: .isPairParentFlag)
        try container.encodeIfPresent(pairMetSearchCriteriaFlag, forKey: .pairMetSearchCriteriaFlag)
        try container.encodeIfPresent(editableDueToAssignmentFlag, forKey: .editableDueToAssignmentFlag)
        try container.encodeIfPresent(modifyDate, forKey: .modifyDate)
        try container.encodeIfPresent(modifiedByUser, forKey: .modifiedByUser)
        try container.encodeIfPresent(pairReportType, forKey: .pairReportType)
        try container.encodeIfPresent(finscanCategory, forKey: .finscanCategory)
        try container.encodeIfPresent(wrapperStatus, forKey: .wrapperStatus)
        try container.encodeIfPresent(sourceLists, forKey: .sourceLists)
    }



}
