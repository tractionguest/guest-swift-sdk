//
// InviteUpdateParams.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** The root of the InviteUpdateParams type&#39;s schema. */
public struct InviteUpdateParams: Codable, Hashable {

    public var mobileNumber: String?
    /** Used for transfering ownership of an &#x60;Invite&#x60; to another member of the Account */
    public var userId: Int?
    public var onPremise: Bool?
    public var notificationTriggers: [NotificationTriggerCreateParams]?
    public var firstName: String?
    public var emailTemplateId: Int?
    public var customFields: [CustomField]?
    public var hostIds: [Int]?
    public var title: String?
    /**  */
    public var startDate: Date?
    public var lastName: String?
    public var endDate: Date?
    public var email: String?
    public var company: String?
    public var groupVisitId: Int?

    public init(mobileNumber: String? = nil, userId: Int? = nil, onPremise: Bool? = nil, notificationTriggers: [NotificationTriggerCreateParams]? = nil, firstName: String? = nil, emailTemplateId: Int? = nil, customFields: [CustomField]? = nil, hostIds: [Int]? = nil, title: String? = nil, startDate: Date? = nil, lastName: String? = nil, endDate: Date? = nil, email: String? = nil, company: String? = nil, groupVisitId: Int? = nil) {
        self.mobileNumber = mobileNumber
        self.userId = userId
        self.onPremise = onPremise
        self.notificationTriggers = notificationTriggers
        self.firstName = firstName
        self.emailTemplateId = emailTemplateId
        self.customFields = customFields
        self.hostIds = hostIds
        self.title = title
        self.startDate = startDate
        self.lastName = lastName
        self.endDate = endDate
        self.email = email
        self.company = company
        self.groupVisitId = groupVisitId
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case mobileNumber = "mobile_number"
        case userId = "user_id"
        case onPremise = "on_premise"
        case notificationTriggers = "notification_triggers"
        case firstName = "first_name"
        case emailTemplateId = "email_template_id"
        case customFields = "custom_fields"
        case hostIds = "host_ids"
        case title
        case startDate = "start_date"
        case lastName = "last_name"
        case endDate = "end_date"
        case email
        case company
        case groupVisitId = "group_visit_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(mobileNumber, forKey: .mobileNumber)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(onPremise, forKey: .onPremise)
        try container.encodeIfPresent(notificationTriggers, forKey: .notificationTriggers)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(emailTemplateId, forKey: .emailTemplateId)
        try container.encodeIfPresent(customFields, forKey: .customFields)
        try container.encodeIfPresent(hostIds, forKey: .hostIds)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(groupVisitId, forKey: .groupVisitId)
    }



}
