//
// Visitor.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/** Visitor information */
public struct Visitor: Codable, Hashable {

    /** UUID */
    public var id: String?
    public var active: Bool?
    public var company: String?
    public var createdVia: String?
    public var email: String?
    public var firstName: String?
    public var lastName: String?
    public var mobile: String?
    public var note: String?
    public var profilePicContentType: String?
    public var profilePicFileName: String?
    public var profilePicFileSize: String?
    public var profilePicUpdatedAt: String?
    public var watchlistLevel: String?
    public var createdAt: Date?
    public var updatedAt: Date?

    public init(id: String? = nil, active: Bool? = nil, company: String? = nil, createdVia: String? = nil, email: String? = nil, firstName: String? = nil, lastName: String? = nil, mobile: String? = nil, note: String? = nil, profilePicContentType: String? = nil, profilePicFileName: String? = nil, profilePicFileSize: String? = nil, profilePicUpdatedAt: String? = nil, watchlistLevel: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.id = id
        self.active = active
        self.company = company
        self.createdVia = createdVia
        self.email = email
        self.firstName = firstName
        self.lastName = lastName
        self.mobile = mobile
        self.note = note
        self.profilePicContentType = profilePicContentType
        self.profilePicFileName = profilePicFileName
        self.profilePicFileSize = profilePicFileSize
        self.profilePicUpdatedAt = profilePicUpdatedAt
        self.watchlistLevel = watchlistLevel
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case active
        case company
        case createdVia = "created_via"
        case email
        case firstName = "first_name"
        case lastName = "last_name"
        case mobile
        case note
        case profilePicContentType = "profile_pic_content_type"
        case profilePicFileName = "profile_pic_file_name"
        case profilePicFileSize = "profile_pic_file_size"
        case profilePicUpdatedAt = "profile_pic_updated_at"
        case watchlistLevel = "watchlist_level"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(createdVia, forKey: .createdVia)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(mobile, forKey: .mobile)
        try container.encodeIfPresent(note, forKey: .note)
        try container.encodeIfPresent(profilePicContentType, forKey: .profilePicContentType)
        try container.encodeIfPresent(profilePicFileName, forKey: .profilePicFileName)
        try container.encodeIfPresent(profilePicFileSize, forKey: .profilePicFileSize)
        try container.encodeIfPresent(profilePicUpdatedAt, forKey: .profilePicUpdatedAt)
        try container.encodeIfPresent(watchlistLevel, forKey: .watchlistLevel)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }



}
