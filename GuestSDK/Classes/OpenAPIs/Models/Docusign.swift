//
// Docusign.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

/**  */
public struct Docusign: Codable, Hashable {

    /**  */
    public var templateId: String?
    /**  */
    public var integration: String?
    /**  */
    public var ndaStatus: String?
    /**  */
    public var ndaSignedDate: Date?
    /**  */
    public var envelopeId: String?
    /**  */
    public var sequence: String?
    /**  */
    public var docusignId: String?
    /**  */
    public var docusignName: String?
    /**  */
    public var title: String?

    public init(templateId: String? = nil, integration: String? = nil, ndaStatus: String? = nil, ndaSignedDate: Date? = nil, envelopeId: String? = nil, sequence: String? = nil, docusignId: String? = nil, docusignName: String? = nil, title: String? = nil) {
        self.templateId = templateId
        self.integration = integration
        self.ndaStatus = ndaStatus
        self.ndaSignedDate = ndaSignedDate
        self.envelopeId = envelopeId
        self.sequence = sequence
        self.docusignId = docusignId
        self.docusignName = docusignName
        self.title = title
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case templateId = "template_id"
        case integration
        case ndaStatus = "nda_status"
        case ndaSignedDate = "nda_signed_date"
        case envelopeId = "envelope_id"
        case sequence
        case docusignId = "docusign_id"
        case docusignName = "docusign_name"
        case title
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(templateId, forKey: .templateId)
        try container.encodeIfPresent(integration, forKey: .integration)
        try container.encodeIfPresent(ndaStatus, forKey: .ndaStatus)
        try container.encodeIfPresent(ndaSignedDate, forKey: .ndaSignedDate)
        try container.encodeIfPresent(envelopeId, forKey: .envelopeId)
        try container.encodeIfPresent(sequence, forKey: .sequence)
        try container.encodeIfPresent(docusignId, forKey: .docusignId)
        try container.encodeIfPresent(docusignName, forKey: .docusignName)
        try container.encodeIfPresent(title, forKey: .title)
    }



}
